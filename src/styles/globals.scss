@import "variables";

@tailwind base;
@tailwind components;
@tailwind utilities;

@keyframes divider-width {
  0% {
    width: 0;
  }
  100% {
    width: 1.5rem;
  }
}
@keyframes divider-height {
  0% {
    height: 0;
  }
  100% {
    height: 1.5rem;
  }
}
@keyframes opacity {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@mixin dividerAttr($placement: "vertical", $index) {
  @if $placement == "vertical" {
    &::before {
      position: absolute;
      content: "";
      display: block;
      border-right: 1px solid #b4b4b4;
      left: 50%;
      transform: translateX(-50%);
      bottom: calc(100% + 0.75rem);
      animation: divider-height 0.2s ease-in forwards;
      animation-delay: #{0.2 + $index * 0.4}s;
    }
  } @else {
    &::after {
      position: absolute;
      content: "";
      display: block;
      border-top: 1px solid #b4b4b4;
      top: 50%;
      transform: translateY(-50%);
      left: calc(100% + 0.75rem);
      animation: divider-width 0.2s ease-in forwards;
      animation-delay: #{0.2 + $index * 0.4}s;
    }
  }
}

@layer utilities {
  .animate-delay-0 {
    animation-delay: 0s;
  }
  .animate-delay-75 {
    animation-delay: 75ms;
  }
  .animate-delay-100 {
    animation-delay: 100ms;
  }
  .animate-delay-150 {
    animation-delay: 150ms;
  }
  .animate-delay-200 {
    animation-delay: 200ms;
  }
  .animate-delay-300 {
    animation-delay: 300ms;
  }
  .animate-delay-400 {
    animation-delay: 400ms;
  }
  .animate-delay-500 {
    animation-delay: 500ms;
  }
  .animate-delay-700 {
    animation-delay: 700ms;
  }
  .animate-delay-1000 {
    animation-delay: 1000ms;
  }
}

@layer components {
  #nav-dock {
    position: fixed;
    display: flex;
    justify-content: center;

    ul {
      li:hover + li {
        & > div {
          width: 5.5rem;
          height: 5.5rem;
          margin-top: -0.5rem;
        }
      }
      li:has(+ li:hover) {
        & > div {
          width: 5.5rem;
          height: 5.5rem;
          margin-top: -0.5rem;
        }
      }
    }
  }
  .resume-vertical-list {
    @for $i from 0 through 1 {
      li:nth-of-type(#{$i + 1}) {
        @include dividerAttr("vertical", $i);
      }
    }
  }
  .resume-aside {
    @media (max-width: #{$sm-breakpoint - 1}) {
      @for $i from 0 through 2 {
        li:nth-of-type(#{$i + 1}) {
          @if $i != 2 {
            @include dividerAttr("horizontal", $i);
          }
          opacity: 0;
          animation: opacity 0.2s ease-in forwards;
          animation-delay: #{$i * 0.4}s;
        }
      }
    }
    @media (min-width: $sm-breakpoint) {
      @for $i from 0 through 2 {
        li:nth-of-type(#{$i + 1}) {
          @if $i != 2 {
            @include dividerAttr("vertical", $i);
          }
          opacity: 0;
          animation: opacity 0.2s ease-in forwards;
          animation-delay: #{$i * 0.4}s;
        }
      }
    }
  }
}
html,
body {
  font-size: 0.625rem;
}

* {
  backface-visibility: hidden;
}

::selection {
  color: #f1f5f9;
  background-color: #646687;
}
